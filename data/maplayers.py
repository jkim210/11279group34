# -*- coding: utf-8 -*-
"""mapLayers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17R417f3eX48FW9I4P3CYtcPkEVpfREha
"""

!pip install geopandas
!pip install mapclassify
!pip install pygeos

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/11279group34/
!pwd

!pip uninstall rtree
!sudo apt install libspatialindex-dev
!pip install rtree

import geopandas
import pandas as pd
import rtree
import pygeos
import matplotlib.pyplot as plt
import folium
import numpy as np

"""Reading in layer data"""

watershed = geopandas.read_file('data/mitigationBank/Mitigation_Bank_Watersheds.geojson')
watershed

centroids = geopandas.read_file('centroidPoints.geojson')

centroids

#parcels = geopandas.read_file('REDUCEDlanduseLDI_centroids_nearestID_dist.geojson')
parcels = geopandas.read_file('landuseLDI_centroids_nearestID_dist.geojson')

# Create new row for LSI * nearest water dist
parcels['LSIxWATERDISTANCE'] = parcels.apply(lambda row: row.LSI * row.dist, axis=1)
parcels

"""## Try and get only things within Northern Ocklawaha River"""

centroids.crs

watershed.crs

targetWatershed = watershed.loc[watershed['NAME'] == 'Northern Ocklawaha River'].to_crs(epsg=3395)
watershed

targetWatershedGeo = targetWatershed.iloc[0]['geometry']
targetWatershedGeo

from tqdm.auto import tqdm

within = []
for i, row in tqdm(centroids.iterrows(), total=centroids.shape[0]):
  if row.geometry.within(targetWatershedGeo):
    within.append(row)
within

# Convert list of series into list of objects
withinGeos = []
withinIDS = []
for series in within:
  withinIDS.append(series.values[0])
  withinGeos.append(series.values[1])

pointsWithinArea = geopandas.GeoDataFrame(data=withinIDS, geometry=withinGeos, crs='EPSG:4326')
pointsWithinArea = pointsWithinArea.rename(columns={0: 'id'})

parcelsWithin = geopandas.read_file('parcelsInNorthern_Ocklawaha.geojson')
parcelsWithin = parcelsWithin.drop(['WMD_DISTRICT', 'LANDUSE_YEAR', 'SHAPELEN', 'LSIxWATERDISTANCE'], axis=1)
parcelsWithin

x = 10 in parcelsWithin['OBJECTID']
x

parcelsWithin.loc[parcelsWithin['OBJECTID'] == 3]

# Get unique lvl 3 values
parcelsWithin.drop_duplicates('LEVEL3_VALUE').drop(['OBJECTID', 'SHAPEAREA', 'nearestID', 'dist', 'geometry', 'WATERDISTANCE/LDI', 'normalized'], axis=1).to_html('uniques.html')

uniques = parcelsWithin.drop_duplicates('LEVEL3_VALUE').drop(['OBJECTID', 'SHAPEAREA', 'nearestID', 'dist', 'geometry', 'WATERDISTANCE/LDI', 'normalized'], axis=1)
uniques.set_index('LEVEL3_VALUE', inplace=True)
uniques

[1490] + uniques.loc[1490].values.tolist()

parcelsWithin.loc[parcelsWithin['OBJECTID'] == 3889, ['LEVEL3_VALUE', 'LDI', 'LSI', 'DESCRIPTION']] = [8370] + uniques.loc[8370].values.tolist()
parcelsWithin

parcelsWithin.normalized.sum()

def function(dist, LSI):
  if LSI != 0:
    return dist / LSI
  else:
    return 0

parcelsWithin['WATERDISTANCE/LDI'] = parcelsWithin.apply(lambda row: function(row.dist, row.LSI), axis=1)
parcelsWithin

"""W/ layers"""

waterParcels = parcelsWithin.loc[parcelsWithin['dist'] == 0]

parcelsWithin.drop(waterParcels.index, inplace=True)

parcelsWithin.drop(parcelsWithin.loc[parcelsWithin['WATERDISTANCE/LDI'] == 0].index, inplace=True)
parcelsWithin.drop(parcelsWithin.loc[parcelsWithin['WATERDISTANCE/LDI'] > 750].index, inplace=True)

parcelsWithin.hist(column='WATERDISTANCE/LDI')

parcelsWithin['normalized'] = np.log(parcelsWithin['WATERDISTANCE/LDI'])
parcelsWithin.hist(column='normalized')

map = folium.Map(location=[29.648, -82.343], zoom_start=12, tiles='CartoDB positron')
map

foliumParcels = folium.features.GeoJson(parcelsWithin, 
                                        name="Parcels",
                                        tooltip=folium.features.GeoJsonTooltip(
                                            fields=['DESCRIPTION', 'OBJECTID'],
                                            aliases = ['Description', 'Parcel ID'],
                                            labels=True,
                                            sticky=False
                                                                            )
                                        )
map.add_child(foliumParcels)

folium.Choropleth(
    geo_data=foliumParcels,
    data=foliumParcels,
    columns=["OBJECTID", "WATERDISTANCE/LDI"],
    key_on="feature.id",
    fill_color="BuPu",
    fill_opacity=0.7,
    line_opacity=0.5,
    legend_name="Development Impact",
).add_to(map)

folium.LayerControl().add_to(map)
map.save('mapFolium.html')

"""Display map with layers?"""

m = folium.Map(location=[27.70, -82.94], zoom_start=7, tiles='CartoDB positron')
m

folium_watersheds = folium.features.GeoJson(watershed, name="Watersheds")

file = open("REDUCEDx2landuseLDI_centroids_nearestID_dist.geojson")

folium_parcels = folium.features.GeoJson(file.read(), name="Parcels")

m.add_child(folium_watersheds)

m.add_child(folium_parcels)

folium.LayerControl().add_to(m)
m

m.save('map2.html')

from shapely.geometry import Polygon

coord1 = [-83.7377930, -83.3642578, -80.5133057, -80.7659912, -83.7377930]
coord2 = [29.8597014, 28.6664912, 28.9841173, 30.1261244, 29.8597014]
polygon_geom = Polygon(zip(coord1, coord2))
crs = {'init': 'epsg:4326'}
polygon = geopandas.GeoDataFrame(index=[0], crs=crs, geometry=[polygon_geom])       
polygon.plot()

polygon.to_crs(epsg=4326)

concat = pd.concat([polygon]*166937 )

truths = concat.contains(parcels)

truths.loc[truths == True]

"""Getting only Northern Ocklawaha River"""

import pandas as pd

desiredPoly = watershed.loc[watershed.NAME == 'Northern Ocklawaha River']
desiredPoly.to_crs(epsg='3395', inplace=True)
desiredPoly.plot()

x = desiredPoly.geometry.contains(centroids)
x

centroids[~centroids.geometry.within(desiredPoly)]

geopandas.sjoin(centroids, desiredPoly, op='within')

!pip install -q condacolab -q
import condacolab
condacolab.install()

!conda install geopandas

import geopandas as gpd

# switching to just removing a bunch of parcels
import random

drops = []
for i in range(166937 ):
  if random.random() > .2:
    drops.append(i)

reducedParcels = parcels.drop(drops)
reducedParcels

reducedParcels.to_file("REDUCEDx2landuseLDI_centroids_nearestID_dist.geojson", driver="GeoJSON")

